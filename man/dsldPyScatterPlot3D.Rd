\name{dsldPyScatterPlot3D}
\alias{dsldPyScatterPlot3D}

\title{dsldPyScatterPlot3D}

\description{
    This function, meant for Python users, uses the rpy2 library to call the R 
    function dsldScatterPlot3D() from within a Python environment. 

    The function takes in a list of Python arguments corresponding to the 
    arguments to the R function. These Python arguments are converted to R 
    arguments that are then passed into the R function. This way, the Python 
    user can call the function similar to how an R user would call the function. 
    
    The R function, dsldScatterPlot3D(), generates a graph. In the python 
    environment, an image of this graph is generated, saved, and automatically 
    opened in an image viewer. The image is automatically removed shortly after 
    being saved (so as not to take up space), but the user can view the graph as 
    long as they keep the image viewer open.

    For more information on the R function itself, please refer to its man page, 
    which you can access through the command ?dsldScatterPlot3D
}

\usage{
    dsldPyScatterPlot3D(data, sName=NULL, yNames=NULL, sGroups=NULL, 
                              sortedBy="Name", numGroups=8, maxPoints=NULL,
                              xlim=NULL, ylim=NULL, zlim=NULL,
                              main=NULL, colors="Paired", opacity=1, 
                              pointSize=8)
}

\arguments{
    \item{data}{
        a dataframe with at least 3 columns for the axes. Additional columms may 
        be used as a sensitive variable.
    }
    \item{sName}{
        the index or name of the column that contains the groups for which the 
        data will be grouped by. This column should not be numeric. 
        If not supplied, the function will use a non-logical column with the 
        least number of unique values.
    }
    \item{yNames}{
        a vector of the indices or names of the columns that are graphed on the 
        3 axes. These columns should have numeric data.
        If not supplied, the function will use the first 3 numeric columns in 
        the dataframe.
    }
    \item{sGroups}{
        a vector of the names of the groups for which the data will be grouped 
        by. 
        Every value in the vector must exist in the sName column of the 
        dataframe.
        If not supplied, the function will create it automatically according to 
        the sortedby and numgrps parameters.
        By default, the function uses the 8 alphabetically first distinct groups 
        in the sName column.
    }
    \item{sortedBy}{
        controls how sGroups is created automatically. If sGroups is suppled, 
        this does nothing. One of three values: "Name", "Frequency", 
        "Frequency-Descending". 
        "Name" gets the first values alphabetically.
        "Frequency" gets the most frequently occuring values.
        "Frequency-Descending" gets the least frequently occuring values.
    }
    \item{numGroups}{
        how many groups will be automatically generated by the function. 
        If grpnames is supplied, this does nothing. 
    }
    \item{maxPoints}{
        a limit to how many points may be displayed on the graph.
        There is no limit by default.
    }
    \item{xlim, ylim, zlim}{
        the x, y and z limits [a vector with c(min, max)] of the plot.
    }
    \item{main}{
        the title of the graph. By default, its the name of the sName "vs. " 
        the yNames
    }
    \item{colors}{
        either a colorbrewer2.org palette name (e.g. "YlOrRd" or "Blues"), 
        or a vector of colors to interpolate in hexadecimal   "#RRGGBB" format, 
        or a color interpolation function like colorRamp().
        
        In the python shell, enter as a list of strings [].
    }
    \item{opacity}{
        a value between 0 and 1.
        Enter as a string
    }
    \item{pointSize}{
        a value above 1.
        Enter as a string
    }
}

\note{
    The usage of this function requires Python 3.10, rpy2, plotly, and IPython. 
    It might not work on linux machines.
}    

\note{ 
    If the user intends to pass in an R dataframe by using the R function 
    write.csv to convert from rdata to csv may create a csv with an extra 
    column. This extra column has an empty name(“”). This change to the data has 
    been known to significantly change the results when fetching with pandas. In 
    order to fix this issue, the entire column with the empty name or “” should 
    be deleted.
}

\note{
    It is better to run through the Python Shell Prompt. If you run through the 
    OS Shell Prompt instead, you have to enter the arguments in their proper 
    order -- in the Python Shell Prompt, this is not required, as you can 
    instead use the convention argName=argValue. In OS Shell Prompt, you cannot 
    specify the argName, only the argValue, so the order must be correct.
}

\value{
    An interactable 3D scatterPlot
}

\references{
    plotly's 3 scatterplot:
    \link{https://plotly.com/r/3d-scatter-plots/}
}

\author{
    T. Abdullah, S. Martha, B. Ouattara, B. Zarate
}

\examples{
    # IMPORTANT: Before running any of these examples, go to /dsld/inst/Python

    # IMPORTANT: It is better to run through the Python Shell Prompt (see 
    # example 1b). If you run through the OS Shell Prompt instead, you have to 
    # enter the arguments in their proper order. See the above note for more 
    # information.

    %# Example 1a: Running from the OS shell
    %insert here

    # Example 1b: Running from the Python shell prompt
    # Must install qeML in R to access the pef data
    python # Open Python shell prompt
    from dsldScatterPlot3D_Py_R import dsldPyScatterPlot3D
    import rpy2.robjects as robjects
    robjects.r['data']('pef')
    data = robjects.r('pef')
    dsldPyScatterPlot3D(data, "sex", ['occ', 'wageinc', 'wkswrkd'])
}

